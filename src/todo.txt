
Idee:
	abstract ZeroMq and have type safe protocol for inproc and tcp
	use a single Instance and configure in a simple way, without the need to understand all intricate details of ZeroMQ

core
	later:
		async / Router dealer socket
		Discovery

Backlog:
features
    Pub / Sub / Publisher / Sub and Bus? --> async subscribers

    extend XtResult with callbacks 
    socket as a bus ? (single instance to access all handler types)
    Demistify for stacktrace
    Performance (Utf8)

    Tests:
        Complex Types
        inheritance for types?

PubSub
    make tcp work
    timeot / endpoint not found retry policy
    CancellationToken for the Subscriber
    Subscriberasync

misc
    load test with 10 K Messages / s


extra projects for each serializer package
    a la
    heitech.zeroMqXt.Serializing.Utf8json
    heitech.zeroMqXt.Serializing.Newtonsoftjson


integrate netmq users 
    derive socket from their netmqsocket with extension methods


Todo Failure scenarios
    check what happens if more than one server is setup with the same type for Rq/Rep

others:
    transport.Message: todo rather use fullyqualifed name (assembly)
    Socket.Respond catch block:  exception propagation?
    // todo if tcp for pub sub, turn arround subscriber and publisher connect/bind and the order in which you invoke them

unit-Tests
     // todo cancel server, stops response
    // todo multiple servers for same type (Contestion?)
    // todo change to be able to use task (for now it needs parameterless ctor so it can be newed, which task obv does not support)